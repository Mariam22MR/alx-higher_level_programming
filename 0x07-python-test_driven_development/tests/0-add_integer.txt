The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Import function from module:

    >>> add_integer = __import__('0-add_integer').add_integer

Test one int argument:

    >>> add_integer(2)
    100

Test one int argument and check default second:

    >>> add_integer(0)
    98

Test one float:

    >>> add_integer(123.9)
    221

Test one negative float:

    >>> add_integer(-95.5)
    3

Test two integers:

    >>> add_integer(30, 10)
    40

Test two big integers:

    >>> add_integer(22222222, 45454545)
    67676767

Test positive and  negative integers:

    >>> add_integer(84689, -6973654)
    -6888965

Test negative and positive integers:

    >>> add_integer(-1397, 300)
    -1097

Test integer and float:

    >>> add_integer(167, 5.222)
    172

Test float and integer:

    >>> add_integer(123.45, 1234)
    1357

Test two floats:

    >>> add_integer(0.8, 0.2)
    0.4

Add infinity:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Add nan:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

Test first arg invalid:

    >>> add_integer('lol', 0)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test second arg invalid:

    >>> add_integer(154154, [])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Test both args invalid:

    >>> add_integer(None, None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test two strings:

    >>> add_integer('lol', 'monika')
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test float overflow:
    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer
    
